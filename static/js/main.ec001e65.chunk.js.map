{"version":3,"sources":["images/penguin.png","images/polar_bear.png","images/blank_tile.png","images/penguin_tile.png","images/polar_bear_tile.png","game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","calculateWinner","squares","lines","i","length","a","b","c","Square","props","imageSource","value","PenguinTile","PolarBearTile","BlankTile","className","onClick","src","alt","Board","state","Array","fill","xIsNext","this","slice","setState","handleClick","player","Penguin","PolarBear","status","winner","renderStatusImage","renderSquare","Button","variant","resetGame","Link","target","href","React","Component","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,uRCU3C,SAASC,EAAgBC,GAWrB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAO,KAGX,SAASG,EAAOC,GACZ,IAAIC,EAWJ,OATIA,EADgB,MAAhBD,EAAME,MACQC,IAES,MAAhBH,EAAME,MACCE,IAGAC,IAId,4BAAQC,UAAU,SAASC,QAASP,EAAMO,SACtC,yBAAKD,UAAU,eAAeE,IAAKP,EAAaQ,IAAKT,EAAME,S,IAKjEQ,E,kDACF,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IACDW,MAAQ,CACTnB,QAASoB,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJE,E,wDAQPpB,GACR,IAAMF,EAAUuB,KAAKJ,MAAMnB,QAAQwB,QAC/BxB,EAAQE,IAAMH,EAAgBC,KAIlCA,EAAQE,GAAKqB,KAAKJ,MAAMG,QAAU,IAAM,IACxCC,KAAKE,SAAS,CACVzB,QAASA,EACTsB,SAAUC,KAAKJ,MAAMG,a,mCAIhBpB,GAAI,IAAD,OACZ,OAAO,kBAACK,EAAD,CAAQG,MAAOa,KAAKJ,MAAMnB,QAAQE,GAAIa,QAAS,kBAAM,EAAKW,YAAYxB,Q,wCAG/DyB,GACd,IAAIlB,EAOJ,MANe,MAAXkB,EACAlB,EAAcmB,IACI,MAAXD,IACPlB,EAAcoB,KAGX,yBAAKf,UAAU,eAAeE,IAAKP,EAAaQ,IAAKU,M,kCAI5DJ,KAAKE,SAAS,CACVzB,QAASoB,MAAM,GAAGC,KAAK,MACvBC,SAAS,M,+BAIP,IAGFQ,EACAH,EAJC,OACCI,EAAShC,EAAgBwB,KAAKJ,MAAMnB,SAc1C,OATI+B,GACAD,EAAS,WACTH,EAASI,IAGTD,EAAS,gBACTH,EAASJ,KAAKJ,MAAMG,QAAU,IAAM,KAIpC,6BACI,yBAAKR,UAAU,UACX,0BAAMA,UAAU,eAAegB,GAC9BP,KAAKS,kBAAkBL,IAE5B,6BACA,yBAAKb,UAAU,aACVS,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,yBAAKnB,UAAU,aACVS,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,yBAAKnB,UAAU,aACVS,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,6BACA,yBAAKnB,UAAU,eACX,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,YAAYpB,QAAS,kBAAM,EAAKqB,cAAhD,cAGA,6BACA,6BALJ,gBAMiB,kBAACC,EAAA,EAAD,CACTC,OAAO,SACPC,KAAK,yCAFI,sB,GAxFbC,IAAMC,WAkHXC,E,uKAbP,OACI,yBAAK5B,UAAU,QACX,yBAAKA,UAAU,UACX,4CAEJ,yBAAKA,UAAU,cACX,kBAAC,EAAD,Y,GARD0B,IAAMC,WC3IVE,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec001e65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/penguin.c418334f.png\";","module.exports = __webpack_public_path__ + \"static/media/polar_bear.6b3a3b30.png\";","module.exports = __webpack_public_path__ + \"static/media/blank_tile.f470a1cd.png\";","module.exports = __webpack_public_path__ + \"static/media/penguin_tile.abed73ee.png\";","module.exports = __webpack_public_path__ + \"static/media/polar_bear_tile.8896ef51.png\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport Penguin from '../images/penguin.png';\nimport PolarBear from '../images/polar_bear.png';\nimport BlankTile from '../images/blank_tile.png'\nimport PenguinTile from '../images/penguin_tile.png';\nimport PolarBearTile from '../images/polar_bear_tile.png';\nimport './Game.css';\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction Square(props) {\n    let imageSource;\n    if (props.value === 'X') {\n        imageSource = PenguinTile;\n\n    } else if (props.value === 'O') {\n        imageSource = PolarBearTile;\n\n    } else {\n        imageSource = BlankTile;\n    }\n\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            <img className=\"square-image\" src={imageSource} alt={props.value} />\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (squares[i] || calculateWinner(squares)) {\n            return;\n        }\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    renderSquare(i) {\n        return <Square value={this.state.squares[i]} onClick={() => this.handleClick(i)} />;\n    }\n\n    renderStatusImage(player) {\n        let imageSource;\n        if (player === 'X') {\n            imageSource = Penguin;\n        } else if (player === 'O') {\n            imageSource = PolarBear;\n        }\n\n        return <img className=\"status-image\" src={imageSource} alt={player} />\n    }\n\n    resetGame() {\n        this.setState({\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        });\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n\n        let status;\n        let player;\n\n        if (winner) {\n            status = 'Winner: ';\n            player = winner;\n\n        } else {\n            status = 'Next player: ';\n            player = this.state.xIsNext ? 'X' : 'O';\n        }\n\n        return (\n            <div>\n                <div className=\"status\">\n                    <span className=\"status-text\">{status}</span>\n                    {this.renderStatusImage(player)}\n                </div>\n                <br />\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <br />\n                <div className=\"bottom-text\">\n                    <Button variant=\"contained\" onClick={() => this.resetGame()}>\n                        Reset Game\n                    </Button>\n                    <br />\n                    <br />\n                    Graphics by: <Link\n                        target=\"_blank\"\n                        href=\"https://linkedin.com/in/jeanette-ngo/\">\n                        Jeanette Ngo\n                        </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"header\">\n                    <h1>Tic-Tac-Toe</h1>\n                </div>\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './game/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}